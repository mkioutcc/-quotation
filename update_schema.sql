-- Add tags and is_deleted columns to user_notes table
ALTER TABLE user_notes 
ADD COLUMN IF NOT EXISTS tags TEXT[] DEFAULT '{}',
ADD COLUMN IF NOT EXISTS is_deleted BOOLEAN DEFAULT FALSE;

-- Update existing records to set is_deleted to false
UPDATE user_notes 
SET is_deleted = FALSE 
WHERE is_deleted IS NULL;

-- Create an index on is_deleted for better query performance
CREATE INDEX IF NOT EXISTS idx_user_notes_is_deleted ON user_notes(is_deleted);

-- Create an index on user_id and is_deleted for common queries
CREATE INDEX IF NOT EXISTS idx_user_notes_user_id_is_deleted ON user_notes(user_id, is_deleted);

-- Create salaries table
CREATE TABLE IF NOT EXISTS salaries (
    id bigint generated by default as identity primary key,
    user_id uuid references auth.users not null,
    employee_name text not null,
    salary_month text not null, -- Storing as YYYY-MM text format
    amount numeric not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Add indexes for common queries
CREATE INDEX IF NOT EXISTS idx_salaries_user_id ON salaries(user_id);
CREATE INDEX IF NOT EXISTS idx_salaries_user_id_month ON salaries(user_id, salary_month);

-- Enable Row Level Security (RLS)
ALTER TABLE salaries ENABLE ROW LEVEL SECURITY;

-- Create RLS policies
-- Policy: Users can select their own salary records
CREATE POLICY "Allow individual select access" ON salaries
FOR SELECT USING (auth.uid() = user_id);

-- Policy: Users can insert their own salary records
CREATE POLICY "Allow individual insert access" ON salaries
FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Policy: Users can delete their own salary records
CREATE POLICY "Allow individual delete access" ON salaries
FOR DELETE USING (auth.uid() = user_id);

-- Optional: Policy to allow users to update their own records (if needed in the future)
-- CREATE POLICY "Allow individual update access" ON salaries
-- FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

-- Create quotations table
CREATE TABLE IF NOT EXISTS quotations (
    id bigint generated by default as identity primary key,
    user_id uuid references auth.users not null,
    quotation_title text,
    customer_name text not null,
    contact_person text,
    contact_phone text,
    date date not null,
    items jsonb not null, -- Storing items as a JSON array
    total numeric not null,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Add indexes for common queries
CREATE INDEX IF NOT EXISTS idx_quotations_user_id ON quotations(user_id);
CREATE INDEX IF NOT EXISTS idx_quotations_user_id_date ON quotations(user_id, date);

-- Enable Row Level Security (RLS)
ALTER TABLE quotations ENABLE ROW LEVEL SECURITY;

-- Create RLS policies
-- Policy: Users can select their own quotation records
CREATE POLICY "Allow individual select access for quotations" ON quotations
FOR SELECT USING (auth.uid() = user_id);

-- Policy: Users can insert their own quotation records
CREATE POLICY "Allow individual insert access for quotations" ON quotations
FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Policy: Users can delete their own quotation records
CREATE POLICY "Allow individual delete access for quotations" ON quotations
FOR DELETE USING (auth.uid() = user_id);

-- Optional: Policy to allow users to update their own quotation records (if needed)
-- CREATE POLICY "Allow individual update access for quotations" ON quotations
-- FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);
